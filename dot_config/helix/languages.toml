[language-server.ruff]
command = "ruff-lsp"

[language-server.basedpyright]
command = "basedpyright-langserver"

[language-server.basedpyright.config]
basedpyright.analysis.typeCheckingMode = "strict"

[[language]]
name = "python"
language-servers = ["basedpyright", "ruff"]
auto-format = true
roots = ["pyproject.toml"]

[language-server.golangci-lint-lsp]
command = "golangci-lint-langserver"

[language-server.golangci-lint-lsp.config]
command = [
  "golangci-lint",
  "run",
  "--out-format",
  "json",
  "--issues-exit-code=1",
]

[[language]]
name = "go"
auto-format = true
# text-width = 100
# rulers = [100]
# file-types = ["go"]
language-servers = ["gopls", "golangci-lint-lsp"]

[[language]]
name = "rust"
auto-format = true
language-servers = ["rust-analyzer"]

[language-server.emmet-ls]
command = "emmet-ls"
args = ["--stdio"]

[language-server.biome]
command = "biome"
args = ["lsp-proxy"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[[language]]
name = "typescript"
# language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "biome",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "a.ts",
] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "biome",
]
# language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "a.js",
] }
auto-format = true

[[language]]
name = "svelte"
auto-format = true
formatter = { command = "dprint", args = ["fmt"] }
language-servers = ["svelteserver", "tailwindcss-ls"]

[[language]]
name = "html"
language-servers = ["vscode-html-language-server", "tailwindcss-ls"]
formatter = { command = "dprint", args = ["fmt", "--stdin", "html"] }
auto-format = true

[[language]]
name = "css"
language-servers = [
  { name = "vscode-css-language-server", except-features = [
    "format",
  ] },
  "biome",
  "tailwindcss-ls",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "a.css",
] }
# formatter = { command = "dprint", args = ["fmt", "--stdin", "css"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "biome",
  "tailwindcss-ls",
]
# formatter = { command = "dprint", args = ["fmt", "--stdin", "jsx"] }
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "a.jsx",
] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "biome",
  "tailwindcss-ls",
]
# formatter = { command = "dprint", args = ["fmt", "--stdin", "tsx"] }
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "a.tsx",
] }
auto-format = true

[[language]]
name = "json"
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
  "biome",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "a.json",
] }
# formatter = { command = "dprint", args = ["fmt", "--stdin", "json"] }
auto-format = true

[[language]]
name = "toml"
auto-format = true
formatter = { command = "taplo", args = ["fmt", "-"] }

[[language]]
name = "yaml"
auto-format = true

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true
completion = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"
"https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-tasks.json" = "roles/{tasks,handlers}/*.{yml,yaml}"
"https://json.schemastore.org/kustomization.json" = "**/kustomization.{yml,yaml}"

[[language]]
name = "lua"
auto-format = true
formatter = { command = "stylua", args = ["-"] }

[language-server.pest-language-server]
command = "pest-language-server"

[[language]]
name = "pest"
scope = "source.pest"
injection-regex = "pest"
file-types = ["pest"]
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 4, unit = "    " }
language-servers = ["pest-language-server"]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'

[[grammar]]
name = "pest"
source = { git = "https://github.com/pest-parser/tree-sitter-pest", rev = "a8a98a824452b1ec4da7f508386a187a2f234b85" }

[language-server.rust-analyzer.config]
check.command = "clippy"

[language-server.sql-language-server]
command = "sql-language-server"
args = ["up", "--method", "stdio"]

[[language]]
name = "sql"
auto-format = true
language-servers = ["sql-language-server"]

[[language]]
name = "jinja"
language-servers = ["vscode-html-language-server", "tailwindcss-ls"]
formatter = { command = "dprint", args = ["fmt", "--stdin", "jinja"] }
auto-format = true

[language-server.astro-ls]
command = "astro-ls"
args = ["--stdio"]
config = { typescript = { tsdk = "/Users/henek/node_modules/typescript/lib" } }

[[language]]
name = "astro"
auto-format = true
language-servers = ["astro-ls", "tailwindcss-ls"]
